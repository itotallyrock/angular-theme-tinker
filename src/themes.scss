@use '@angular/material' as mat;
@use 'sass:color' as color;
@use 'sass:map' as map;
@use 'sass:list' as list;

@mixin theme-app() {
    // Dark/light specific colors
    $primary-color-light: var(--theme-primary-light, #e5e6ea);
    $primary-color-dark: var(--theme-primary-dark, #3c434f);
    // Colors based on dark/light specific colors
    $background-color-light: color-mix(in srgb, $primary-color-light 10%, white);
    $text-color-light: color-mix(in srgb, $primary-color-light 10%, black);
    $background-color-dark: color-mix(in srgb, $primary-color-dark 90%, white);
    $text-color-dark: color-mix(in srgb, $primary-color-dark 10%, white);

    // Theme colors
    $accent-color: var(--theme-accent, #3494f8);
    $warn-color: var(--theme-warn, #e8bc2c);
    $error-color: var(--theme-error, #f44336);
    $success-color: var(--theme-success, #36f45c);

    $typography-config: mat.define-typography-config();

    $light-theme: create-theme((
            color: create-color-config($primary-color-light, $accent-color, $warn-color, $error-color, $success-color, $background-color-light, $text-color-light),
            typography: $typography-config,
            density: 0), $is-dark: false);
    $dark-theme: create-theme((
            color: create-color-config($primary-color-dark, $accent-color, $warn-color, $error-color, $success-color, $background-color-dark, $text-color-dark),
            typography: $typography-config,
            density: 0), $is-dark: true);

    @include mat.all-component-typographies($light-theme);
    .light-themed {
        @include include-theme($light-theme);
    }
    .dark-themed {
        @include include-theme($dark-theme);
    }
}

@mixin include-theme($theme) {
    @include mat.all-component-colors($theme);
    @include add-theme-css-variables($theme);

    $lighterDefaultColor: color-mix(in srgb, map.get(map.get(map.get($theme, color), background), background) 50%, map.get(map.get(map.get($theme, color), accent), 200));
    $lighterPrimaryTheme: map.deep-merge($theme, (color: (primary: (default: $lighterDefaultColor))));
    @include mat.icon-button-color($lighterPrimaryTheme);
    @include mat.button-color($lighterPrimaryTheme);
    @include mat.fab-color($lighterPrimaryTheme);
}

@function create-theme($base-theme, $is-dark) {
    $theme: null;
    @if $is-dark {
        $theme: mat.define-dark-theme($base-theme);
    } @else {
        $theme: mat.define-light-theme($base-theme);
    }

    // Add back base theme overrides
    $theme: map.deep-merge($theme, $base-theme);

    @return $theme;
}

@function create-color-config($primary, $accent, $warn, $error, $success, $background-color, $text-color) {
    $primary-palette: create-palette($primary);
    @return (
        primary: $primary-palette,
        accent: create-palette($accent),
        warn: create-palette($warn),
        error: create-palette($error),
        success: create-palette($success),
        background: (
            background: $background-color,
        ),
        foreground: (
            text: $text-color,
            divider: color-mix(in srgb, $text-color 50%, $background-color),
        )
    );
}

@function create-palette($color, $lighter: color-mix(in srgb, $color 15%, white), $darker: color-mix(in srgb, $color 15%, black)) {
    $base-colors: (
        50: color-mix(in srgb, $lighter 60%, $color),
        100: color-mix(in srgb, $lighter 50%, $color),
        200: color-mix(in srgb, $lighter 30%, $color),
        300: color-mix(in srgb, $lighter 20%, $color),
        400: color-mix(in srgb, $lighter 10%, $color),
        500: $color,
        600: color-mix(in srgb, $darker 10%, $color),
        700: color-mix(in srgb, $darker 20%, $color),
        800: color-mix(in srgb, $darker 30%, $color),
        900: color-mix(in srgb, $darker 50%, $color),
        A100: color-mix(in srgb, $lighter 25%, $color),
        A200: color-mix(in srgb, $lighter 15%, $color),
        A400: color-mix(in srgb, $lighter 5%, $color),
        A700: color-mix(in srgb, $darker 10%, $color)
    );
    // TODO: Try to use HSL increase luminance and use that to determine contrast color
    $contrast-colors: (
        50: color-mix(in srgb, map.get($base-colors, 50) 10%, $darker),
        100: color-mix(in srgb, map.get($base-colors, 100) 10%, $darker),
        200: color-mix(in srgb, map.get($base-colors, 200) 10%, $darker),
        300: color-mix(in srgb, map.get($base-colors, 300) 10%, $darker),
        400: color-mix(in srgb, map.get($base-colors, 400) 10%, $darker),
        500: color-mix(in srgb, map.get($base-colors, 500) 10%, $darker),
        600: color-mix(in srgb, map.get($base-colors, 600) 10%, $lighter),
        700: color-mix(in srgb, map.get($base-colors, 700) 10%, $lighter),
        800: color-mix(in srgb, map.get($base-colors, 800) 10%, $lighter),
        900: color-mix(in srgb, map.get($base-colors, 900) 10%, $lighter),
        A100: color-mix(in srgb, map.get($base-colors, A100) 10%, $darker),
        A200: color-mix(in srgb, map.get($base-colors, A200) 10%, $darker),
        A400: color-mix(in srgb, map.get($base-colors, A400) 10%, $lighter),
        A700: color-mix(in srgb, map.get($base-colors, A700) 10%, $lighter),
    );
    @return mat.define-palette(map.merge($base-colors, (
        contrast: $contrast-colors)
    ), $text: 50);
}

/**
 Set vanilla CSS variables based on theme for components to use
 */
@mixin add-theme-css-variables($theme) {
    $color-config: mat.get-color-config($theme);
    $theme-primary-map: map-get($color-config, primary);
    $theme-accent-map: map-get($color-config, accent);
    $theme-warn-map: map-get($color-config, warn);
    $theme-error-map: map-get($color-config, error);
    $theme-success-map: map-get($color-config, success);

    $palettes: ('primary', $theme-primary-map), ('accent', $theme-accent-map), ('warn', $theme-warn-map),
            ('success', $theme-success-map), ('error', $theme-error-map);
    $variants: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 'A100', 'A200', 'A400', 'A700';

    @each $palette-tuple in $palettes {
        $palette-name: list.nth($palette-tuple, 1);
        $palette: list.nth($palette-tuple, 2);
        @each $variant in $variants {
            --theme-#{$palette-name}-#{$variant}: #{mat.get-color-from-palette($palette, $variant)};
            --theme-#{$palette-name}-contrast-#{$variant}: #{mat.get-contrast-color-from-palette($palette, $variant)};
        }
    }
}